1. By default, what will subject equal?

It will equal what it's block evaluates to when used in each example.

- Correct Answer: An instance of the class under test.

2. How do you define a custom subject? Provide an example:

By giving it a block that gets evaluated in each example of choice.
subject { [1, 2, 3] }

- Correct Answer: Invoke the subject method and provide a Ruby block. 
The final evaluation of the block will be the value of subject whenever 
it's used in an example.

subject { "hello" } 

3. How does the described_class helper method work? What is the advantage 
of using it over writing the class name out?

You can use the the same helper method initially defined when the first
argument was passed. It's advantageous because regardless if the 
class name changed; it will reference to the current class under test.

- Correct Answer: described_class dynamically references the class 
being tested (the one passed as an argument to the top-level describe 
method). The advantage is that, if the class name changes, the rest of 
the spec does not have to change.

4. Write an RSpec test for an array with 2 elements.
- Declare the subject to be [1, 2].
- Write an example that uses expect(subject) to test whether the array 
is equal to [1, 2].
- Write an example that uses the one-liner is_expected syntax.
- Which do you prefer?

RSpec.describe 'check array' do
  subject { [1, 2] }
  
  it 'should return an array of 1, 2' do
    expect(subject).to eq([1, 2])
  end
  
  context 'should return an array of 1, 2' do
    it { is_expected.to eq([1, 2]) }
  end
end

I prefer the classic for now but as I become more proficient at remembering
the syntax I can see myself preferring the one-liner instead.

- Correct Answer: 

RSpec.describe 'some array' do
  subject { [1, 2] }

  it 'should be an array with 2 elements' do
    expect(subject).to eq([1, 2])
  end

  it { is_expected.to eq([1, 2]) }
end

Note*: My answer also passed with no failures

5. What's the difference between include_examples and include_context?

include_examples are reusable specs that run from a pre-defined
shared_examples that can be called from specs throughout the code.

include_context works similarly but reuses an entire pre-defined 
shared_context and can be called in other parts of the code.

- Correct Answer: he include_examples method injects predefined examples 
into an example group. The include_context method injects context 
(i.e. before blocks, instance variables, helper methods, let variables) 
into an example group.

Both remove duplication across tests.

